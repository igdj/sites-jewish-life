{% extends 'Default/base.html.twig' %}

{% block head %}
    {# leaflet.js includes, 1.6.x due to https://github.com/Leaflet/Leaflet/issues/7255 #}
    <link rel="stylesheet" href="{{ app.request.basepath }}/vendor/leaflet-1.6.0/leaflet.css" />
    <script src="{{ app.request.basepath }}/vendor/leaflet-1.6.0/leaflet.js"></script>


    {# https://github.com/coryasilva/Leaflet.ExtraMarkers #}
    <link rel="stylesheet" href="{{ app.request.basepath }}/vendor/leaflet-extra-markers/css/leaflet.extra-markers.min.css" />
    <script src="{{ app.request.basepath }}/vendor/leaflet-extra-markers/js/leaflet.extra-markers.min.js"></script>

    <style>
    .my-label {
        color: white;
        position: absolute;
        /* z-index: -1; */
        background: none;
        border: none;
    }

    .leaflet-tooltip.my-label {
        box-shadow: none;
    }

    .filter {
        width: min-width: 10em;
        background-color: white;
        padding: 0.2em;
    }

    .my-label:before,
    .my-label:after {
        border: none;
    }

    .popup-fixed {
        position: fixed;
        top: auto;
        bottom: 0 !important;
        left: 0 !important;
        right: 0 !important;
        transform: none !important;
        margin: 0;
        border-radius: 0;
    }

    .popup-fixed .leaflet-popup-tip-container {
        display: none;
    }

    .leaflet-fixed-pane {
        z-index: 1400; /* on top of Copyright info */
    }

    .popup-fixed .leaflet-popup-content-wrapper {
        border-radius: 0 !important;
    }

    .popup-fixed  .leaflet-popup-content {
        margin-top: 24px;
        width: calc(100% - 16px) !important;
        padding-right: 16px;
        max-height: 30vh;
        overflow: auto;
    }

    input {
        appearance: none;
        display: inline-block;
        vertical-align: baseline;
    }

    input[type="checkbox"] {
        border: 1px solid #005E96;
        width: 12px;
        height: 13px;
        padding: 0px;
    }

    input[type="checkbox"]:checked {
        background: #005E96;
        background-clip: content-box;
    }
    </style>
{% endblock %}

{% block body %}
    <div class="row">
        <div id="map" class="col-sm-12" style="min-height: 360px"></div>

        <script>
            function adjustMapHeight() {
                $('#map').height(function(index, height) {
                    return window.innerHeight - $(this).offset().top;
                });
            }

            $( window ).resize(adjustMapHeight);
            adjustMapHeight();

            var map = L.map('map');

            var pane = map.createPane('fixed',
                                      document.getElementById('map'));

            /*
             * The following Mapbox styles are available to all accounts using a valid access token:
             * mapbox://styles/mapbox/streets-v11
             * mapbox://styles/mapbox/outdoors-v11
             * mapbox://styles/mapbox/light-v10
             * mapbox://styles/mapbox/dark-v10
             * mapbox://styles/mapbox/satellite-v9
             * mapbox://styles/mapbox/satellite-streets-v11
             */
            L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
                tileSize: 512,
                minZoom: 1,
                maxZoom: 17,
                zoomOffset: -1,
                attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
                    '<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
                    'Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
                id: 'mapbox/outdoors-v11', // 'hausverstand/ck9n3jwdp2e6f1imr5ccrf682',
                accessToken: 'pk.eyJ1IjoiaGF1c3ZlcnN0YW5kIiwiYSI6ImNpemU2OWJvaTAwNHIyd252b2ptaDV2NjkifQ.FGA8-opghZHquZJKlHSFdg',
            }).addTo(map);

            var hash = window.location.hash.substring(1);

            var markers = [];
            var activeMarker = null;
            var activeMarkerIcon = null;
            var activeFilter = null;

            var featureCollection = {
                "type": "FeatureCollection",

                "features": [
                {% for feature in features %}
                    {% set site = feature.site %}
                    {
                        "type": "Feature",
                        "properties": {
                            "name": "{{ site.titleLocalized(app.request.locale) }}",
                            "marker": "{{ site.getId() }}",
                            "popupContent": {{ feature.popupContent|json_encode|raw }},
                            "latitude": {{ site.latitude }},
                            "longitude": {{ site.longitude }},
                            "topic": {{ site.topic|json_encode|raw }},
                            "isPhysical": {{ site.isPhysical()|json_encode|raw }}
                        },
                        "geometry": {
                            "type": "Point",
                            "coordinates": [ {{ site.longitude }}, {{ site.latitude }}  ]
                        }
                    }{% if not loop.last %}, {% endif%}
                {% endfor %}
                ]
            };

            var markerProperties = {};

            var tooltipProperties = {
                /*
                permanent: false,
                direction: 'center',
                opacity: 1,
                offset: [0, 0],
                className: "my-label"
                */
            };

            function buildIconName(feature) {
                var ret = '';

                switch (feature.properties.topic) {
                    case 'Bildung / Wissenschaft':
                        ret = 'university';
                        break;

                    case 'Gedenken':
                        ret = 'memory';
                        break;

                    case 'Kultur / Kunst':
                        ret = 'theater-masks';
                        break;

                    case 'Religion / Tradition':
                        ret = 'star-of-david';
                        break;

                    case 'Soziales':
                        ret = 'hands-helping';
                        break;

                    case 'Sport':
                        ret = 'volleyball-ball';
                        break;

                    case 'Wirtschaft':
                        ret = 'tools';
                        // ret = 'cash-register';
                        // ret = 'coins';
                        break;
                }

                return ret;
            }

            function buildIconShape(feature) {
                return feature.properties.isPhysical
                    ? 'square'
                    : 'circle';
            }

            function buildActiveIcon(iconName, iconShape) {
                return L.ExtraMarkers.icon({
                    prefix: 'fa',
                    icon: iconName,
                    svg: true,
                    markerColor: '#d42132',
                    shape: iconShape
                });
            }

            function isTouchDevice() {
                return (('ontouchstart' in window)
                     || (navigator.MaxTouchPoints > 0)
                     || (navigator.msMaxTouchPoints > 0));
            }

            function buildMarker(feature, latlng) {
                var iconName = 'fa-' + buildIconName(feature);
                var iconShape = buildIconShape(feature);

                /*
                 * markerColor:
                 *  'red', 'orange-dark', 'orange', 'yellow', 'blue-dark', 'cyan', 'purple', 'violet',
                 *  'pink', 'green-dark', 'green', 'green-light', 'black', 'white',
                 *  or color hex code if svg is true
                 */
                markerProperties.icon = L.ExtraMarkers.icon({
                    prefix: 'fa',
                    icon: iconName,
                    svg: true,
                    markerColor: '#005e96',
                    shape: iconShape
                });

                var activeIcon = buildActiveIcon(iconName, iconShape);

                var marker = L.marker(latlng, markerProperties);

                if (!isTouchDevice()) {
                    marker
                    .bindTooltip(feature.properties.name, tooltipProperties);
                }

                marker.on('click', function(e) {
                    activateMarker(marker, activeIcon);
                });

                if (hash !== "" && feature.properties.marker == hash) {
                    activeMarker = marker;
                    activeMarkerInactiveIcon = activeMarker.getIcon();
                    activeMarker.setIcon(activeIcon);
                }

                return marker;
            }

            function activateMarker(marker, activeIcon) {
                if (activeMarker != null) {
                    activeMarker.setIcon(activeMarkerInactiveIcon);
                }

                activeMarker = marker;
                activeMarkerInactiveIcon = activeMarker.getIcon();
                activeMarker.setIcon(activeIcon);
                map.panTo(activeMarker.getLatLng());
            }

            function buildPopup(feature, layer) {
                var popupProperties = {
                    pane: 'fixed',
                    className: 'popup-fixed',
                    autoPan: false
                };

                layer.bindPopup(feature.properties.popupContent, popupProperties)
                    .on('popupopen', function (popup) {
                        // set lightbox
                        var selector = 'figure.figure-' + feature.properties.marker + ' a';
                        var lightbox = $(selector).simpleLightbox({
                            nav: false,
                            showCounter: false,
                            alertError: false,
                            overlayOpacity: 1
                        });
                    });
            }

            function buildFeatureGroup(featureCollection) {
                return new L.geoJson(featureCollection, {
                    onEachFeature: buildPopup,
                    filter: function(feature, layer) {
                        if (null === activeFilter) {
                            return true;
                        }

                        var iconName = buildIconName(feature);

                        return -1 !== activeFilter.indexOf(iconName);
                    },
                    pointToLayer: buildMarker
                });
            }

            var featureGroup = buildFeatureGroup(featureCollection);
            featureGroup.addTo(map);

            L.Control.Filter = L.Control.extend({
                onAdd: function(map) {
                    var div = L.DomUtil.create('div', 'filter');

                    return div;
                },

                onRemove: function(map) {
                    // Nothing to do here
                }
            });

            L.control.filter = function(opts) {
                return new L.Control.Filter(opts);
            }

            L.control.filter({ position: 'topright' }).addTo(map);
            $('.filter').html('<form id="filter">'
                + '<input type="checkbox" id="university" value="university" checked> <label for="university">{{ 'Learning / Scholarship'|trans }}</label><br />'
                + '<input type="checkbox" id="memory" value="memory" checked> <label for="memory">{{ 'Memory'|trans }}</label><br />'
                + '<input type="checkbox" id="theater-masks" value="theater-masks" checked> <label for="theater-masks">{{ 'Culture / Arts'|trans }}</label><br />'
                + '<input type="checkbox" id="star-of-david" value="star-of-david" checked> <label for="star-of-david">{{ 'Religion / Tradition'|trans }}</label><br />'
                + '<input type="checkbox" id="hands-helping" value="hands-helping" checked> <label for="hands-helping">{{ 'Social Issues'|trans }}</label><br />'
                + '<input type="checkbox" id="volleyball-ball" value="volleyball-ball" checked> <label for="volleyball-ball"> {{ 'Sport'|trans }}</label><br />'
                + '<input type="checkbox" id="tools" value="tools" checked> <label for="tools">{{ 'Economy'|trans }}</label><br />'
                + '</form>');

            $('#filter').change(function() {
                activeFilter = []; // clear

                $('#filter input').each(function () {
                    if (this.checked) {
                        activeFilter.push($(this).val());
                    }
                });

                map.removeLayer(featureGroup);

                // rebuild with activeFilter
                featureGroup = buildFeatureGroup(featureCollection);
                featureGroup.addTo(map);
            });

            function activateSite(id) {
                featureGroup.eachLayer(function (layer) {
                    if (layer.feature.properties.marker == id) {
                        layer.openPopup();

                        var iconName = buildIconName(layer.feature);
                        var iconShape = buildIconShape(layer.feature);
                        activateMarker(layer, buildActiveIcon(iconName, iconShape));
                    }
                });
            }

            if (activeMarker != null) {
                map.setView(activeMarker.getLatLng(), 13);
                activeMarker.openPopup();
            }
            else {
                map.fitBounds(featureGroup.getBounds());
            }
        </script>
    </div>
{% endblock %}
