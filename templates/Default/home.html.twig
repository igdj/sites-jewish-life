{% extends 'Default/base.html.twig' %}

{% block head %}
    {# leaflet.js includes #}
    <link rel="stylesheet" href="{{ app.request.basepath }}/vendor/leaflet-1.7.1/leaflet.css" />
    <script src="{{ app.request.basepath }}/vendor/leaflet-1.7.1/leaflet.js"></script>

    <style>
    .my-label {
        color: white;
        position: absolute;
        /* z-index: -1; */
        background: none;
        border: none;
    }

    .leaflet-tooltip.my-label {
        box-shadow: none;
    }

    .my-label:before,
    .my-label:after {
        border: none;
    }

    .popup-fixed {
        position: fixed;
        top: auto;
        bottom: 0 !important;
        left: 0 !important;
        right: 0 !important;
        transform: none !important;
        margin: 0;
        border-radius: 0;
    }

    .popup-fixed .leaflet-popup-tip-container {
        display: none;
    }

    .popup-fixed .leaflet-popup-content-wrapper {
        border-radius: 0 !important;
        padding-bottom: 1em;
    }

    .popup-fixed  .leaflet-popup-content {
        margin-top: 24px;
        width: calc(100% - 16px) !important;
        padding-right: 16px;
        max-height: 30vh;
        overflow: auto;
    }
    </style>
{% endblock %}

{% block body %}
    <div class="row">
        <div id="map" class="col-sm-12" style="min-height: 360px"></div>

        <script>
            function adjustMapHeight() {
                $('#map').height(function(index, height) {
                    return window.innerHeight - $(this).offset().top;
                });
            }

            $( window ).resize(adjustMapHeight);
            adjustMapHeight();

            var map = L.map('map');

            var pane = map.createPane('fixed',
                    document.getElementById('map'));

            /*
             * The following Mapbox styles are available to all accounts using a valid access token:
             * mapbox://styles/mapbox/streets-v11
             * mapbox://styles/mapbox/outdoors-v11
             * mapbox://styles/mapbox/light-v10
             * mapbox://styles/mapbox/dark-v10
             * mapbox://styles/mapbox/satellite-v9
             * mapbox://styles/mapbox/satellite-streets-v11
             */
            L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
                tileSize: 512,
                minZoom: 1,
                maxZoom: 16,
                zoomOffset: -1,
                attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
                    '<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
                    'Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
                id: 'mapbox/outdoors-v11', // 'hausverstand/ck9n3jwdp2e6f1imr5ccrf682',
                accessToken: 'pk.eyJ1IjoiaGF1c3ZlcnN0YW5kIiwiYSI6ImNpemU2OWJvaTAwNHIyd252b2ptaDV2NjkifQ.FGA8-opghZHquZJKlHSFdg',
            }).addTo(map);

            var hash = window.location.hash.substring(1);

            var markers = [];
            var activeMarker = null;

            var featureCollection = {
                "type": "FeatureCollection",

                "features": [
                {% for feature in features %}
                    {% set site = feature.site %}
                    {
                        "type": "Feature",
                        "properties": {
                            "name": "{{ site.getMarker() }}",
                            "popupContent": {{ feature.popupContent|json_encode|raw }},
                            "latitude": {{ site.latitude }},
                            "longitude": {{ site.longitude }}
                        },
                        "geometry": {
                            "type": "Point",
                            "coordinates": [ {{ site.longitude }}, {{ site.latitude }}  ]
                        }
                    }{% if not loop.last %}, {% endif%}
                {% endfor %}
                ]
            };

            var markerProperties = {
                radius: 12,
                fillColor: '#d42132',
                color: '#d42132',
                weight: 1,
                opacity: 1,
                fillOpacity: 0.8,
            };

            function buildMarker(feature, latlng) {
                var marker = L.circleMarker(latlng, markerProperties)
                    .bindTooltip(feature.properties.name, {
                        permanent: true,
                        direction: 'center',
                        opacity: 1,
                        offset: [0, 0],
                        className: "my-label"
                    });

                marker.on('popupopen', function (popup) {
                    console.log("popup opened !", popup);
                });

                if (hash !== "" && feature.properties.name == hash) {
                    activeMarker = marker;
                }

                return marker;
            }

            function buildPopup(feature, layer) {
                var popupProperties = {
                    pane: 'fixed',
                    className: 'popup-fixed',
                    autoPan: true
                };
                layer.bindPopup(feature.properties.popupContent, popupProperties);
            }

            var featureGroup = new L.geoJson(featureCollection, {
                onEachFeature: buildPopup,
                filter: function(feature, layer) {
                    return true; // TODO: check if active
                },
                pointToLayer: buildMarker
            });
            featureGroup.addTo(map);

            if (activeMarker != null) {
                map.setView(activeMarker.getLatLng(), 13);
                activeMarker.openPopup();
            }
            else {
                map.fitBounds(featureGroup.getBounds());
            }
        </script>
    </div>
{% endblock %}
